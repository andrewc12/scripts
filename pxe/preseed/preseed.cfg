preseed/url=tftp://host/path/to/preseed.cfg

















Now let’s write the pxelinux.cfg/default file.

vim /var/lib/tftpboot/pxelinux.cfg/default 
# D-I config version 2.0
include debian/wheezy/amd64/boot-screens/menu.cfg
default debian/wheezy/amd64/boot-screens/vesamenu.c32
prompt 1
timeout 3

DEFAULT wheezy_amd64

LABEL wheezy_amd64
        kernel debian/wheezy/amd64/linux
        append vga=normal initrd=debian/wheezy/amd64/initrd.gz auto=true interface=auto netcfg/dhcp_timeout=60 netcfg/choose_interface=auto priority=critical url=http://10.0.0.1/pxe/preseed.cfg DEBCONF_DEBUG=5
        IPAPPEND 2

As all my machines have multiple network adapters (up to 8), I could not know on which interface number udev was going to allocate to the interface that was actually connected to the administration vlan.
On my first attempts the debian-installer only seemed to try to dhcp on one interface than returned an error telling that it was unable to setup the network correctly, and thus unable to continue with the network install. After some googling, I found the information on a forum linking to a launchpad bug, etc. The secret is to add “IPAPPEND 2? to the pxe boot sequence in order to pass the MAC address of the interface wich actually booted during the PXE phase to the debian-installer, so that it could DHCP on this particular interface, and not the others.

Ok, so at this point, all machines were able to boot and launch the installation, then try to request the preseed as specified in the default file. In order not to write a preseed from scratch, I based my preseed file on the one that is included in Razor, changing some puppet variables that did not apply anymore and the post-configuration.

~# mkdir /var/www/pxe
~# vim /var/www/pxe/preseed.cfg 
d-i debian-installer/locale string en_US
d-i console-keymaps-at/keymap select us
d-i console-setup/ask_detect boolean false
d-i keyboard-configuration/xkb-keymap select us
d-i keyboard-configuration/layoutcode string us
d-i netcfg/choose_interface select auto
d-i netcfg/get_hostname string noconfigured
d-i netcfg/get_domain string example.com
d-i netcfg/no_default_route boolean true
d-i mirror/country string manual
d-i mirror/protocol string http
d-i mirror/http/hostname string 10.0.0.1:3142
d-i mirror/http/directory string /debian/
d-i mirror/http/proxy string
d-i mirror/suite string wheezy
d-i time/zone string Europe/Paris
d-i clock-setup/utc boolean true
d-i clock-setup/ntp boolean true
d-i partman-auto/disk string /dev/sda
d-i partman-auto/method string lvm
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-md/device_remove_md boolean true
d-i partman-auto-lvm/guided_size string 200G
d-i partman-auto/choose_recipe select atomic
d-i partman/default_filesystem string ext4
d-i partman-lvm/confirm boolean true
d-i partman-lvm/confirm_nooverwrite boolean true
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true
d-i partman-md/confirm boolean true
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true
d-i passwd/root-login boolean true
d-i passwd/make-user boolean false
d-i passwd/root-password password password
d-i passwd/root-password-again password password
d-i user-setup/allow-password-weak boolean true
#d-i apt-setup/restricted boolean true
tasksel tasksel/first multiselect standard
d-i pkgsel/include string ruby openssh-server build-essential curl tcpdump facter puppet ethtool vim screen curl dmidecode lsb-release ntp ipmitool
d-i grub-installer/only_debian boolean true
d-i grub-installer/with_other_os boolean true
popularity-contest popularity-contest/participate boolean false
d-i finish-install/reboot_in_progress note
# Once the installation is done we'll set the system up for some firstboot
# magic.
d-i preseed/late_command string chroot /target sh -c "/usr/bin/curl -o /tmp/postinstall http://10.0.0.1/pxe/postinstall && /bin/sh -x /tmp/postinstall"

As described in this preseed, it will install the operating system, then download the postinstall file, which will itself download the actual firstboot script, and create an init script that will only be launched at the first boot. This part was inspired by the great post by Brian Taylor.

~# vim /var/www/pxe/postinstall 
#!/bin/sh

# grab our firstboot script
/usr/bin/curl -o /root/firstboot http://10.0.0.1/pxe/firstboot
chmod +x /root/firstboot

# create a service that will run our firstboot script
cat > /etc/init.d/firstboot << EOF
### BEGIN INIT INFO
# Provides:        firstboot
# Required-Start:  $networking
# Required-Stop:   $networking
# Default-Start:   2 3 4 5
# Default-Stop:    0 1 6
# Short-Description: A script that runs once
# Description: A script that runs once
### END INIT INFO

cd /root ; /usr/bin/nohup sh -x /root/firstboot &


EOF

# install the firstboot service
chmod +x /etc/init.d/firstboot
update-rc.d firstboot defaults

echo "finished postinst"

~# vim /var/www/pxe/firstboot
#!/bin/sh

PXESERVER=10.0.0.1

# This script will run the first time the system boots. Even
# though we've told it to run after networking is enabled,
#
# Introducing a brief sleep makes things work right all the
# time. The time for DHCP to catch up.
sleep 120

# install our new sources
cat > /etc/apt/sources.list <> /etc/modules
done

# get IPMI ip and detect hostname
ipmi_ip=`ipmitool lan print | grep "IP Address  " | sed 's/.*: //'`
hostname=`grep $ipmi_ip /tmp/ipmilist | awk '{print $1}'`
rm /tmp/ipmilist

# set hostname
echo $hostname > /etc/hostname
/etc/init.d/hostname.sh

puppet agent --verbose --no-daemonize --certname=`cat /etc/hostname` --onetime --server puppet.example.com

# Remove our firstboot service so that it won't run again
update-rc.d firstboot remove
rm /etc/init.d/firstboot /root/firstboot

# Reboot into the new kernel
/sbin/reboot

In the firstboot script, I get the IPMI ip information using ipmitool(1), than deduct the hostname information from the ipmilist file. This could be directly done via a reverse DNS request; but I didn't have the time to setup this.

This allows the machine to connect to the puppetmaster server using its real hostname, and get itself configured (software + network).

The ipmilist file looks something like this:

client1.example.com 10.0.0.31
client2.example.com 10.0.0.32
client3.example.com 10.0.0.33

I agree this is very old-school, not scalable, but I had to improvise to deliver these machine. Plus, it worked like a charm. :)

Cheers,
Ignace M

Tagged: IPMI, preseed, puppet, PXE
Leave a Reply

Name (required)

Mail (required)

Website

Notify me of follow up comments via e-mail
Pages

    CV
    Limited Shell (lshell)
    Memo

Archives
RSS & admin

    Log in
    Entries RSS
    Comments RSS
    WordPress.org

Recent Comments

    Et tant qu’on est dans les liquides | GCU-Squad! on My first shot of NetBSD (5.0)
    ui, ui, y mintinant ti SICE LI DIMON UI | GCU-Squad! on Mounting UFS in read/write under Linux (debian)
    kFFFffshhhhshhKffffh.deb | GCU-Squad! on Creating a .deb package from a python setup.py
    Joe on Running Debian on a Samsung Galaxy under Android
    Kegeruneku on Mounting UFS in read/write under Linux (debian)

Recent Posts

    lshell 0.9.16 is out!
    Cocktail of PXE, Debian, preseed, IPMI & puppet
    lshell 0.9.15.1 is out!
    Debian: restore grub on sd{a,b} using grub-mkdevicemap and grub-install
    Migrating sourceforge CVS source repository to github

Grid Focus by Derek Punsalan 5thirtyone.com.














Skip to main content
credativ - Open Source for Business

Search form

    Open Source Services
    Solutions
    About
    credativ Blog

01788 298150
Home >> credativ Blog >> [Howto] Debian preseed with Netboot
[Howto] Debian preseed with Netboot

news rss
Submitted by Irenie White on Fri, 23/07/2010 - 12:00

debianlogo.pngThe vast majority of Debian installations are simplified with the use of Preseeding and Netboot. Friedrich Weber, a school student on a work experience placement with us at our German office has observed the process and captured it in a Howto here: Imagine the following situation: you find yourself with ten to twenty brand new Notebooks and the opportunity to install them with Debian and customise to your own taste. In any case it would be great fun to manually perform the Debian installation and configuration on each Notebook. This is where Debian Preseed comes into play. The concept is simple and self-explanatory; usually, whoever is doing the installation will be faced with a number of issues during the process (e.g. language, partitioning, packages, Bootloader, etc.) In terms of Preseed, all of these issues can now be resolved. Only those which are not already accounted for in Preseed remain for the Debian installer. In the ideal situation these would become apparent at the outset of the installation, where the solution would differ depending on the target system and which the administrator must deal with manually - only when these have been dealt with can the installation be left to run unattended. Preseed functions on some simple inbuilt configuration data: preseed.cfg. It includes, as detailed above, the questions which must be answered during installation, and in debconf-format. Data such as this consists of several rows, each row of which defines a debconf configuration option - a response to a question - for example:

    d-i debian-installer/localstring de_DE.UTF-8

The first element of these lines is the name of the package, which is configured (d-i is here an abbreviation of debian installer), the second element is the name of the option, which is set, as the third element of the type of option (a string) and the rest is the value of the option. In this example, we set the language to German using UTF-8-coding. You can put lines like this together yourself, even simpler with the tool debconf-get-selections: these commands provide straight forward and simple options, which can be set locally. From the selection you can choose your desired settings, adjusted if necessary and copied into preseed.cfg. Here is an example of preseed.cfg:

    d-i debian-installer/locale string de_DE.UTF-8
    d-i debian-installer/keymap select de-latin1
    d-i console-keymaps-at/keymap select de
    d-i languagechooser/language-name-fb select German
    d-i countrychooser/country-name select Germany
    d-i console-setup/layoutcode string de_DE
 
    d-i clock-setup/utc boolean true
    d-i time/zone string Europe/Berlin
    d-i clock-setup/ntp boolean true
    d-i clock-setup/ntp-server string ntp1
 
    tasksel tasksel/first multiselect standard, desktop, gnome-desktop, laptop
    d-i pkgsel/include string openssh-client vim less rsync

In addition to language and timezone settings, selected tasks and packages are also set with these options. If left competely unattended, the installation will not complete, but will make a good start. Now onto the question of where Preseed pulls its data from. It is in fact possible to use Preseed with CD and DVD images or USB sticks, but generally more comfortable to use a Debian Netboot Image, essentially an installer, which is started across the network and which can cover its Preseed configuration. This boot across the network is implemented with PXE and requires a system that can boot from a network card. Next, the system depends on booting from the network card. It travels from a DHCO server to an IP address per broadcast. This DHCP server transmits not only a suitable IP, but also to the IP of a so-called Bootserver. A Bootserver is a TFTP-Server, which provides a Bootloader to assist the Administrator with the desired Debian Installer. At the same time the Debian Installer can be shared with the Boot options that Preseed should use and where he can find the Preseed configuration. Here is a snippet of the PXELINUX configuration data pxelinux.cfg/default:

    label i386
        kernel debian-installer/i386/linux
        append vga=normal initrd=debian-installer/i386/initrd.gz netcfg/choose_interface=eth0 domain=example.com locale=de_DE debian-installer/country=DE debian-installer/language=de debian-installer/keymap=de-latin1-nodeadkeys console-keymaps-at/keymap=de-latin1-nodeadkeys auto-install/enable=false preseed/url=http://$server/preseed.cfg DEBCONF_DEBUG=5 -- quiet

When the user types i386, the tt>debian-installer/i386/linux kernel (found on the TFTP server) is downloaded and run. This is in addition to a whole load of bootoptions given along the way. The debian installer allows the provision of debconf options as boot parameters. It is good practice for the installer to somehow communicate where to find the Preseed communication on the network (preseed/url). In order to download this Preseed configuration, it must also be somehow built into the network. The options for that will be handed over (the options for the hostnames would be deliberately omitted here, as every target system has its own Hostname). auto-install/enable would delay the language set up so that it is only enabled after the network configuration, in order that these installations are read through preseed.cfg. It is not necessary as the language set up will also be handed over to the kernel options to ensure that the network configuration is German. The examples and configuration excerpts mentioned here are obviously summarised and shortened. Even so, this blog post should have given you a glimpse into the concept of Preseed in connection with netboot. Finally, here is a complete version of preseed.cfg:

    d-i debian-installer/locale string de_DE.UTF-8
    d-i debian-installer/keymap select de-latin1
    d-i console-keymaps-at/keymap select de
    d-i languagechooser/language-name-fb select German
    d-i countrychooser/country-name select Germany
    d-i console-setup/layoutcode string de_DE
 
    # Network
    d-i netcfg/choose_interface select auto
    d-i netcfg/get_hostname string debian
    d-i netcfg/get_domain string example.com
 
    # Package mirror
    d-i mirror/protocol string http
    d-i mirror/country string manual
    d-i mirror/http/hostname string debian.example.com
    d-i mirror/http/directory string /debian
    d-i mirror/http/proxy string
    d-i mirror/suite string lenny
 
    # Timezone
    d-i clock-setup/utc boolean true
    d-i time/zone string Europe/Berlin
    d-i clock-setup/ntp boolean true
    d-i clock-setup/ntp-server string ntp.example.com
 
    # Root-Account
    d-i passwd/make-user boolean false
    d-i passwd/root-password password secretpassword
    d-i passwd/root-password-again password secretpassword
 
    # Further APT-Options
    d-i apt-setup/non-free boolean false
    d-i apt-setup/contrib boolean false
    d-i apt-setup/security-updates boolean true
 
    d-i apt-setup/local0/source boolean false
    d-i apt-setup/local1/source boolean false
    d-i apt-setup/local2/source boolean false
 
    # Tasks
    tasksel tasksel/first multiselect standard, desktop
    d-i pkgsel/include string openssh-client vim less rsync
    d-i pkgsel/upgrade select safe-upgrade
 
    # Popularity-Contest
    popularity-contest popularity-contest/participate boolean true
 
    # Command to be followed after the installation. `in-target` means that
         the following
    # Command is followed in the installed environment, rather than in
        the installation environment.
    # Here http://$server/skript.sh nach /tmp is downloaded, enabled and
        implemented.
    d-i preseed/late_command string in-target wget -P /tmp/ http://$server/skript.sh;
  in-target chmod +x /tmp/skript.sh; in-target /tmp/skript.sh

All Howtos of this blog are grouped together in the Howto category - and if you happen to be looking for Support and Services for Debian you've come to the right place at credativ.
Blog Categories: 

    credativ
    Debian
    Howto
    Linux

Blog Tags: 

    credativ
    Debian
    howto
    linux
    preseed

    Technorati icon
    Reddit icon
    Yahoo! icon
    Twitter icon
    Facebook icon
    Google icon
    StumbleUpon icon
    Del.icio.us icon
    Digg icon
    LinkedIn icon
    MySpace icon
    Newsvine icon
    Pinterest icon
    Irenie White's blog

Last 5 Blog articles:
[Howto] Zarafa mail extraction
Case Study: Munich City Council
Software Freedom Day 2012!
Royalty Free Open Standards Consultation
Open Source Drives Software Innovation
Blog Categories:
Blog Tags:

Support Services for Open Source Software - credativ DE Open Source Support Centre
Services

    Training
    Consultancy
    Software Development

Projects

    OpenERP
    Asterisk
    Nagios

Alliances

    OpenERP
    Black Duck
    OpenLogic

Company

    Careers
    Blog
    Offices
    Legal

Contact

    01788 298150
    info@credativ.co.uk
    © credativ ltd.

Facebook icon
Google+ icon
LinkedIn icon
Twitter icon

Accredit UK
